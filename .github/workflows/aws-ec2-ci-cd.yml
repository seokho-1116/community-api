name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  CONTAINER_NAME: community-api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.CI_PAT }}

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'corretto'
          cache: gradle

      - name: build gradle
        run: ./gradlew clean build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/community-api

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Retrieve EC2 Instance ID
        id: get-instance-id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          echo "::set-output name=INSTANCE_ID::$INSTANCE_ID"

      - name: Deploy to EC2
        run: |
          aws ssm send-command --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub Actions deployment" \
            --parameters commands=["docker pull ${{ secrets.DOCKERHUB_USERNAME }}:${{ steps.meta.outputs.tags }}","docker stop ${{ steps.meta.outputs.tags }} || true","docker rm ${{ steps.meta.outputs.tags }} || true","docker run --name ${{ steps.meta.outputs.tags }} -d ${{ secrets.DOCKERHUB_USERNAME }}:${{ steps.meta.outputs.tags }}"]