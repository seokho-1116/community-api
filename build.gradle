buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.testcontainers:postgresql:1.19.1'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.16'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'nu.studer.jooq' version '7.1.1'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.liquibase.gradle' version '2.2.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jooq:jooq:3.16.21'
    jooqGenerator 'org.jooq:jooq-meta-extensions-liquibase:3.16.21'
    jooqGenerator 'org.postgresql:postgresql'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'

    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'info.picocli:picocli:4.7.5'
    liquibaseRuntime 'org.yaml:snakeyaml:2.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.liquibase:liquibase-core'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    annotationProcessor 'org.projectlombok:lombok'

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.testcontainers:testcontainers:1.19.1'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.1'
    testImplementation 'org.testcontainers:postgresql:1.19.1'
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

import org.testcontainers.containers.PostgreSQLContainer

tasks.register('startContainer') {
    var instance = new PostgreSQLContainer("postgres:latest")
            .withDatabaseName("test-database")
    instance.start()
    startContainer.ext.jdbcUrl = instance.getJdbcUrl()
    startContainer.ext.username = instance.getUsername()
    startContainer.ext.password = instance.getPassword()
    startContainer.ext.databaseName = instance.getDatabaseName()
    startContainer.ext.containerId = instance.getContainerId()
    startContainer.ext.imageName = instance.getDockerImageName()
    startContainer.ext.instance = instance
}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            url startContainer.jdbcUrl
            username startContainer.username
            password startContainer.password
        }
    }
}

jooq {
    version = '3.16.21'
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.INFO
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = startContainer.jdbcUrl
                    username = startContainer.username
                    password = startContainer.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = "public"
                        excludes = "databasechangelog|databasechangeloglock"
                    }
                    generate {
                        deprecated = false
                        records = false
                        immutablePojos = false
                        fluentSetters = false
                    }
                    target {
                        packageName = 'com.example.api.jooqgen'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    inputs.dir snippetsDir

    sources{
        include("**/index.adoc","**/*.adoc")
    }

    configurations 'asciidoctorExt'

    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/api/docs')
}


tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file('build/docs/asciidoc')
    into file('src/main/resources/static/api/docs')
}

build {
    dependsOn copyDocument
}

tasks.named('generateJooq').configure {
    dependsOn tasks.named('startContainer')
    dependsOn tasks.named('update')

    doLast {
        startContainer.instance.stop()
    }
}